{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3bb9d762334140491aa06768d33cc14b3a42ee8f856fa338e0130bba30884d38",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1270584",
    "logsBloom": "0x
    "blockHash": "0x6b801777cef9cd86a3f69c55e411534a9f8823eed4a24de2067fcde31921ab24",
    "transactionHash": "0x3bb9d762334140491aa06768d33cc14b3a42ee8f856fa338e0130bba30884d38",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1270584",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "6008",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "98b31ba785d06979a846e7a6c0e89df3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpKeep()\":{\"returns\":{\"_0\":\"bool checks if all conditions are true\"}},\"enterRaffle()\":{\"details\":\"if yes we push the current player in our arrayemitting an event\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpKeep()\":{\"notice\":\"checks if the raffle state is openchecks if there is any balance deposited in the contractchecks if there are any players\"},\"enterRaffle()\":{\"notice\":\"first line checks if there is enough deposited ether in the function to enter the raffle\"},\"getRaffleState()\":{\"notice\":\"Getter Functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__UpkeepNotNeeded();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotAdmin();\\n\\ncontract Raffle is VRFConsumerBaseV2 {\\n    enum RaffleState {\\n        Open,\\n        Closed,\\n        Calculating\\n    }\\n\\n    uint256 public immutable i_entranceFee;\\n    RaffleState public s_raffleState;\\n    address payable[] public s_players;\\n    address payable public s_recentWinner;\\n    address public i_admin;\\n\\n    VRFCoordinatorV2Interface public immutable i_vrfCordinator;\\n    bytes32 public i_gasLane;\\n    uint64 public i_subscriptionId;\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 public i_callbackGasLimit;\\n    uint32 public constant NUM_WORDS = 1;\\n\\n\\n    event RaffleEntered(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        uint256 entranceFee,\\n        address vrfCordinatorV2, \\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCordinatorV2) {\\n        i_admin = msg.sender;\\n        i_entranceFee = entranceFee;\\n        i_vrfCordinator = VRFCoordinatorV2Interface(vrfCordinatorV2); // interface + address = contract\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    /// @notice first line checks if there is enough deposited ether in the function to enter the raffle\\n    /// @dev if yes we push the current player in our array\\n    /// @dev emitting an event\\n    \\n    function enterRaffle() external payable {\\n        if (msg.value < i_entranceFee) revert Raffle__SendMoreToEnterRaffle();\\n        //if (s_raffleState != RaffleState.Open) revert Raffle__RaffleNotOpen();\\n\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEntered(msg.sender);\\n    }\\n\\n    function closeRaffle() external adminOnly() {\\n        bool upKeepNeeded = checkUpKeep();\\n        if (!upKeepNeeded) revert Raffle__UpkeepNotNeeded();\\n\\n        s_raffleState = RaffleState.Calculating;\\n        uint requestId = i_vrfCordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    // 1. Be true after some time interval\\n    // 2. The lottery to be open\\n    // 3. The contract has ETH\\n    // 4. Keepers has LINK\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_players = new address payable[](0);\\n        s_raffleState = RaffleState.Closed;\\n        (bool success, ) = recentWinner.call{ value: address(this).balance }(\\\"\\\");\\n        if (!success) revert Raffle__TransferFailed();\\n  \\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /// @notice checks if the raffle state is open\\n    /// @notice checks if there is any balance deposited in the contract\\n    /// @notice checks if there are any players\\n    /// @return bool checks if all conditions are true\\n\\n    function checkUpKeep() public view returns(bool) {\\n         bool isOpen = s_raffleState == RaffleState.Open;\\n         bool hasBalance = address(this).balance > 0;\\n         bool hasPlayers = s_players.length > 0;\\n\\n        return (isOpen && hasBalance && hasPlayers);\\n    }\\n\\n    modifier adminOnly() {\\n        if (msg.sender != i_admin) revert Raffle__NotAdmin();\\n        _;\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n}\",\"keccak256\":\"0xa911eb64dd2219dad864079e5537c20a71d6b34ed14cc708447f733f6a1b1661\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001830380380620018308339818101604052810190620000379190620001bf565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460a081815250508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260048190555081600560006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600560086101000a81548163ffffffff021916908363ffffffff16021790555050505050506200033a565b6000815190506200015d81620002b8565b92915050565b6000815190506200017481620002d2565b92915050565b6000815190506200018b81620002ec565b92915050565b600081519050620001a28162000306565b92915050565b600081519050620001b98162000320565b92915050565b600080600080600060a08688031215620001de57620001dd620002b3565b5b6000620001ee888289016200017a565b955050602062000201888289016200014c565b9450506040620002148882890162000163565b93505060606200022788828901620001a8565b92505060806200023a8882890162000191565b9150509295509295909350565b6000620002548262000265565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002c38162000247565b8114620002cf57600080fd5b50565b620002dd816200025b565b8114620002e957600080fd5b50565b620002f78162000285565b81146200030357600080fd5b50565b62000311816200028f565b81146200031d57600080fd5b50565b6200032b816200029f565b81146200033757600080fd5b50565b60805160601c60a05160c05160601c6114a46200038c600039600081816108610152610a7b0152600081816104dd015281816105d90152610973015260008181610519015261056d01526114a46000f3fe6080604052600436106101355760003560e01c806378a77b84116100ab578063c8249d8a1161006f578063c8249d8a146103c5578063cc45483f146103f0578063cd1d770d1461041b578063d757d02714610446578063e55ae4e814610471578063fd6673f5146104ae57610135565b806378a77b84146102f05780637ea3e6c1146103075780638638b0c6146103325780638e879c8a1461035d578063ae771f6b1461038857610135565b8063473f1ddc116100fd578063473f1ddc146101ee5780634c43d2841461021957806353a2c19a146102445780635f1b0fd81461026f57806367f082b01461029a57806372cf6e34146102c557610135565b806309bc33a71461013a578063115cbaf5146101655780631fe543e3146101905780632cfcc539146101b9578063470cdf97146101c3575b600080fd5b34801561014657600080fd5b5061014f6104d9565b60405161015c919061115f565b60405180910390f35b34801561017157600080fd5b5061017a610501565b6040516101879190611129565b60405180910390f35b34801561019c57600080fd5b506101b760048036038101906101b29190610efc565b610517565b005b6101c16105d7565b005b3480156101cf57600080fd5b506101d86106d9565b6040516101e59190611195565b60405180910390f35b3480156101fa57600080fd5b506102036106f3565b6040516102109190611026565b60405180910390f35b34801561022557600080fd5b5061022e61071d565b60405161023b9190611026565b60405180910390f35b34801561025057600080fd5b50610259610743565b604051610266919061115f565b60405180910390f35b34801561027b57600080fd5b50610284610752565b604051610291919061115f565b60405180910390f35b3480156102a657600080fd5b506102af61075f565b6040516102bc9190611144565b60405180910390f35b3480156102d157600080fd5b506102da610764565b6040516102e7919061117a565b60405180910390f35b3480156102fc57600080fd5b50610305610769565b005b34801561031357600080fd5b5061031c610971565b604051610329919061115f565b60405180910390f35b34801561033e57600080fd5b50610347610995565b6040516103549190611041565b60405180910390f35b34801561036957600080fd5b506103726109bb565b60405161037f91906110a0565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190610ea2565b6109c1565b6040516103bc9190611041565b60405180910390f35b3480156103d157600080fd5b506103da610a00565b6040516103e79190611085565b60405180910390f35b3480156103fc57600080fd5b50610405610a68565b6040516104129190611129565b60405180910390f35b34801561042757600080fd5b50610430610a79565b60405161043d919061110e565b60405180910390f35b34801561045257600080fd5b5061045b610a9d565b604051610468919061117a565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190610ea2565b610ab3565b6040516104a59190611026565b60405180910390f35b3480156104ba57600080fd5b506104c3610afb565b6040516104d0919061115f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105c957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105c092919061105c565b60405180910390fd5b6105d38282610b08565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610631576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b600560009054906101000a900467ffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600163ffffffff16905090565b6000600361ffff16905090565b600381565b600181565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f0576040517ffd19b09500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006107fa610a00565b905080610833576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000806101000a81548160ff021916908360028111156108585761085761138e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600560009054906101000a900467ffffffffffffffff166003600560089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016108ec9594939291906110bb565b602060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190610ecf565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600181815481106109d157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060006002811115610a1757610a1661138e565b5b60008054906101000a900460ff166002811115610a3757610a3661138e565b5b14905060008047119050600080600180549050119050828015610a575750815b8015610a605750805b935050505090565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600560089054906101000a900463ffffffff1681565b600060018281548110610ac957610ac86113bd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b600060018054905082600081518110610b2457610b236113bd565b5b6020026020010151610b36919061132e565b9050600060018281548110610b4e57610b4d6113bd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610bd757610bd66113ec565b5b604051908082528060200260200182016040528015610c055781602001602082028036833780820191505090505b5060019080519060200190610c1b929190610d33565b5060016000806101000a81548160ff02191690836002811115610c4157610c4061138e565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c6c90611011565b60006040518083038185875af1925050503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b5050905080610ce9576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610dac579160200282015b82811115610dab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d53565b5b509050610db99190610dbd565b5090565b5b80821115610dd6576000816000905550600101610dbe565b5090565b6000610ded610de8846111d5565b6111b0565b90508083825260208201905082856020860282011115610e1057610e0f611420565b5b60005b85811015610e405781610e268882610e78565b845260208401935060208301925050600181019050610e13565b5050509392505050565b600082601f830112610e5f57610e5e61141b565b5b8135610e6f848260208601610dda565b91505092915050565b600081359050610e8781611457565b92915050565b600081519050610e9c81611457565b92915050565b600060208284031215610eb857610eb761142a565b5b6000610ec684828501610e78565b91505092915050565b600060208284031215610ee557610ee461142a565b5b6000610ef384828501610e8d565b91505092915050565b60008060408385031215610f1357610f1261142a565b5b6000610f2185828601610e78565b925050602083013567ffffffffffffffff811115610f4257610f41611425565b5b610f4e85828601610e4a565b9150509250929050565b610f618161121e565b82525050565b610f708161120c565b82525050565b610f7f81611230565b82525050565b610f8e8161123c565b82525050565b610f9d816112b5565b82525050565b610fac816112c7565b82525050565b6000610fbf600083611201565b9150610fca82611440565b600082019050919050565b610fde81611259565b82525050565b610fed81611287565b82525050565b610ffc81611291565b82525050565b61100b816112a1565b82525050565b600061101c82610fb2565b9150819050919050565b600060208201905061103b6000830184610f67565b92915050565b60006020820190506110566000830184610f58565b92915050565b60006040820190506110716000830185610f67565b61107e6020830184610f67565b9392505050565b600060208201905061109a6000830184610f76565b92915050565b60006020820190506110b56000830184610f85565b92915050565b600060a0820190506110d06000830188610f85565b6110dd6020830187611002565b6110ea6040830186610fd5565b6110f76060830185610ff3565b6111046080830184610ff3565b9695505050505050565b60006020820190506111236000830184610f94565b92915050565b600060208201905061113e6000830184610fa3565b92915050565b60006020820190506111596000830184610fd5565b92915050565b60006020820190506111746000830184610fe4565b92915050565b600060208201905061118f6000830184610ff3565b92915050565b60006020820190506111aa6000830184611002565b92915050565b60006111ba6111cb565b90506111c682826112fd565b919050565b6000604051905090565b600067ffffffffffffffff8211156111f0576111ef6113ec565b5b602082029050602081019050919050565b600081905092915050565b600061121782611267565b9050919050565b600061122982611267565b9050919050565b60008115159050919050565b6000819050919050565b600081905061125482611443565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112c0826112d9565b9050919050565b60006112d282611246565b9050919050565b60006112e4826112eb565b9050919050565b60006112f682611267565b9050919050565b6113068261142f565b810181811067ffffffffffffffff82111715611325576113246113ec565b5b80604052505050565b600061133982611287565b915061134483611287565b9250826113545761135361135f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600381106114545761145361138e565b5b50565b61146081611287565b811461146b57600080fd5b5056fea2646970667358221220dae78e31b685bf538fae339ff5be801d82c1436086c527e2a40dbb98ea337aec64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c806378a77b84116100ab578063c8249d8a1161006f578063c8249d8a146103c5578063cc45483f146103f0578063cd1d770d1461041b578063d757d02714610446578063e55ae4e814610471578063fd6673f5146104ae57610135565b806378a77b84146102f05780637ea3e6c1146103075780638638b0c6146103325780638e879c8a1461035d578063ae771f6b1461038857610135565b8063473f1ddc116100fd578063473f1ddc146101ee5780634c43d2841461021957806353a2c19a146102445780635f1b0fd81461026f57806367f082b01461029a57806372cf6e34146102c557610135565b806309bc33a71461013a578063115cbaf5146101655780631fe543e3146101905780632cfcc539146101b9578063470cdf97146101c3575b600080fd5b34801561014657600080fd5b5061014f6104d9565b60405161015c919061115f565b60405180910390f35b34801561017157600080fd5b5061017a610501565b6040516101879190611129565b60405180910390f35b34801561019c57600080fd5b506101b760048036038101906101b29190610efc565b610517565b005b6101c16105d7565b005b3480156101cf57600080fd5b506101d86106d9565b6040516101e59190611195565b60405180910390f35b3480156101fa57600080fd5b506102036106f3565b6040516102109190611026565b60405180910390f35b34801561022557600080fd5b5061022e61071d565b60405161023b9190611026565b60405180910390f35b34801561025057600080fd5b50610259610743565b604051610266919061115f565b60405180910390f35b34801561027b57600080fd5b50610284610752565b604051610291919061115f565b60405180910390f35b3480156102a657600080fd5b506102af61075f565b6040516102bc9190611144565b60405180910390f35b3480156102d157600080fd5b506102da610764565b6040516102e7919061117a565b60405180910390f35b3480156102fc57600080fd5b50610305610769565b005b34801561031357600080fd5b5061031c610971565b604051610329919061115f565b60405180910390f35b34801561033e57600080fd5b50610347610995565b6040516103549190611041565b60405180910390f35b34801561036957600080fd5b506103726109bb565b60405161037f91906110a0565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190610ea2565b6109c1565b6040516103bc9190611041565b60405180910390f35b3480156103d157600080fd5b506103da610a00565b6040516103e79190611085565b60405180910390f35b3480156103fc57600080fd5b50610405610a68565b6040516104129190611129565b60405180910390f35b34801561042757600080fd5b50610430610a79565b60405161043d919061110e565b60405180910390f35b34801561045257600080fd5b5061045b610a9d565b604051610468919061117a565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190610ea2565b610ab3565b6040516104a59190611026565b60405180910390f35b3480156104ba57600080fd5b506104c3610afb565b6040516104d0919061115f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105c957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105c092919061105c565b60405180910390fd5b6105d38282610b08565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610631576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b600560009054906101000a900467ffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600163ffffffff16905090565b6000600361ffff16905090565b600381565b600181565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f0576040517ffd19b09500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006107fa610a00565b905080610833576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000806101000a81548160ff021916908360028111156108585761085761138e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600560009054906101000a900467ffffffffffffffff166003600560089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016108ec9594939291906110bb565b602060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190610ecf565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600181815481106109d157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060006002811115610a1757610a1661138e565b5b60008054906101000a900460ff166002811115610a3757610a3661138e565b5b14905060008047119050600080600180549050119050828015610a575750815b8015610a605750805b935050505090565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600560089054906101000a900463ffffffff1681565b600060018281548110610ac957610ac86113bd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b600060018054905082600081518110610b2457610b236113bd565b5b6020026020010151610b36919061132e565b9050600060018281548110610b4e57610b4d6113bd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610bd757610bd66113ec565b5b604051908082528060200260200182016040528015610c055781602001602082028036833780820191505090505b5060019080519060200190610c1b929190610d33565b5060016000806101000a81548160ff02191690836002811115610c4157610c4061138e565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c6c90611011565b60006040518083038185875af1925050503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b5050905080610ce9576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610dac579160200282015b82811115610dab5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d53565b5b509050610db99190610dbd565b5090565b5b80821115610dd6576000816000905550600101610dbe565b5090565b6000610ded610de8846111d5565b6111b0565b90508083825260208201905082856020860282011115610e1057610e0f611420565b5b60005b85811015610e405781610e268882610e78565b845260208401935060208301925050600181019050610e13565b5050509392505050565b600082601f830112610e5f57610e5e61141b565b5b8135610e6f848260208601610dda565b91505092915050565b600081359050610e8781611457565b92915050565b600081519050610e9c81611457565b92915050565b600060208284031215610eb857610eb761142a565b5b6000610ec684828501610e78565b91505092915050565b600060208284031215610ee557610ee461142a565b5b6000610ef384828501610e8d565b91505092915050565b60008060408385031215610f1357610f1261142a565b5b6000610f2185828601610e78565b925050602083013567ffffffffffffffff811115610f4257610f41611425565b5b610f4e85828601610e4a565b9150509250929050565b610f618161121e565b82525050565b610f708161120c565b82525050565b610f7f81611230565b82525050565b610f8e8161123c565b82525050565b610f9d816112b5565b82525050565b610fac816112c7565b82525050565b6000610fbf600083611201565b9150610fca82611440565b600082019050919050565b610fde81611259565b82525050565b610fed81611287565b82525050565b610ffc81611291565b82525050565b61100b816112a1565b82525050565b600061101c82610fb2565b9150819050919050565b600060208201905061103b6000830184610f67565b92915050565b60006020820190506110566000830184610f58565b92915050565b60006040820190506110716000830185610f67565b61107e6020830184610f67565b9392505050565b600060208201905061109a6000830184610f76565b92915050565b60006020820190506110b56000830184610f85565b92915050565b600060a0820190506110d06000830188610f85565b6110dd6020830187611002565b6110ea6040830186610fd5565b6110f76060830185610ff3565b6111046080830184610ff3565b9695505050505050565b60006020820190506111236000830184610f94565b92915050565b600060208201905061113e6000830184610fa3565b92915050565b60006020820190506111596000830184610fd5565b92915050565b60006020820190506111746000830184610fe4565b92915050565b600060208201905061118f6000830184610ff3565b92915050565b60006020820190506111aa6000830184611002565b92915050565b60006111ba6111cb565b90506111c682826112fd565b919050565b6000604051905090565b600067ffffffffffffffff8211156111f0576111ef6113ec565b5b602082029050602081019050919050565b600081905092915050565b600061121782611267565b9050919050565b600061122982611267565b9050919050565b60008115159050919050565b6000819050919050565b600081905061125482611443565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112c0826112d9565b9050919050565b60006112d282611246565b9050919050565b60006112e4826112eb565b9050919050565b60006112f682611267565b9050919050565b6113068261142f565b810181811067ffffffffffffffff82111715611325576113246113ec565b5b80604052505050565b600061133982611287565b915061134483611287565b9250826113545761135361135f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600381106114545761145361138e565b5b50565b61146081611287565b811461146b57600080fd5b5056fea2646970667358221220dae78e31b685bf538fae339ff5be801d82c1436086c527e2a40dbb98ea337aec64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpKeep()": {
        "returns": {
          "_0": "bool checks if all conditions are true"
        }
      },
      "enterRaffle()": {
        "details": "if yes we push the current player in our arrayemitting an event"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpKeep()": {
        "notice": "checks if the raffle state is openchecks if there is any balance deposited in the contractchecks if there are any players"
      },
      "enterRaffle()": {
        "notice": "first line checks if there is enough deposited ether in the function to enter the raffle"
      },
      "getRaffleState()": {
        "notice": "Getter Functions "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 845,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)840"
      },
      {
        "astId": 848,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 852,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 857,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_gasLane",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 859,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_subscriptionId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 864,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_callbackGasLimit",
        "offset": 8,
        "slot": "5",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)840": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}